import { Inject, Injectable } from '@angular/core';
import { gql, InMemoryCache } from '@apollo/client';
import { Apollo } from 'apollo-angular';
import { Subscribable } from 'app/core/util/pub-sub';
import { AlertService } from 'app/core/util/alert.service';
import { CACHE_TOKEN, KNOWN_QUERIES_TOKEN } from './graphql.module';

@Injectable({ providedIn: 'root' })
export class GraphQLCacheService {
  private subscriptions: Set<string> = new Set<string>();

  constructor(
    @Inject(KNOWN_QUERIES_TOKEN)
    private knownQueries: Subscribable<string>,
    @Inject(CACHE_TOKEN)
    private cache: InMemoryCache,
    private apollo: Apollo,
    private alert: AlertService
  ) {}

  connect(): void {
    this.knownQueries.subscribe(name => {
      this.watchQuery(name, 'Added', '{ id }');
      this.watchQuery(name, 'Updated', '{ id }');
      this.watchQuery(name, 'Deleted');
    });
  }

  private watchQuery(queryName: string, operation: string, selection?: string): void {
    // TODO: improve entity extraction
    const entity = queryName.substring(3, queryName.endsWith('s') ? queryName.length - 1 : queryName.length).toLowerCase();
    const q = `${entity}${operation}`;
    if (!this.subscriptions.has(q)) {
      this.subscriptions.add(q);
      const query = selection ? gql`subscription {${q} ${selection}}` : gql`subscription {${q}}`;
      this.apollo.subscribe({ query }).subscribe(() => {
        this.cache.evict({ id: 'ROOT_QUERY', fieldName: queryName });
        // TODO: do not show alert for self-caused updates
        this.alert.addAlert({ type: 'info', message: `Data for ${entity} has changed. Please Refresh to see the changes.` });
      });
    }
  }
}
