<%_
const pkType = getPkType(databaseType) === 'Long' ? 'number' : 'string';
_%>
import { Injectable } from '@angular/core';
import { HttpResponse } from '@angular/common/http';
import { Observable, of } from 'rxjs';
import { Pagination } from 'app/core/request/request.model';
import { map } from 'rxjs/operators';
import { I<%= entityClass %> } from 'app/entities/<%= entityFileName %>/<%= entityFileName %>.model';
import { GraphQLUtils } from 'app/core/util/graphql-util.service';
import { Create<%= entityClass %>Vars, Create<%= entityClass %>GQL, Get<%= entityClass %>sGQL, Get<%= entityClass %>GQL, Delete<%= entityClass %>GQL, Update<%= entityClass %>Vars, Update<%= entityClass %>GQL } from '<%= typeDefinition === 'TypeScript' ? `../${entityFileName}.gql` : '../../../../graphql' %>';

export type EntityResponseType = HttpResponse<I<%= entityClass %>>;
export type EntityArrayResponseType = HttpResponse<I<%= entityClass %>[]>;

@Injectable({ providedIn: 'root' })
export class <%= entityClass %>GraphQLService {

  constructor(private graphQLUtils: GraphQLUtils,
              private create<%= entityClass %>GQL: Create<%= entityClass %>GQL,
              private update<%= entityClass %>GQL: Update<%= entityClass %>GQL,
              private get<%= entityClass %>sGQL: Get<%= entityClass %>sGQL,
              private get<%= entityClass %>GQL: Get<%= entityClass %>GQL,
              private delete<%= entityClass %>GQL: Delete<%= entityClass %>GQL) {}

  query(req?: Pagination): Observable<EntityArrayResponseType> {
    return this.get<%= entityClass %>sGQL.fetch(this.graphQLUtils.createGraphQlOption(req)).pipe(
      map(result => this.graphQLUtils.toPagedHttpResponse(result.data.result)));
  }

  create(<%= entityInstance %>: I<%= entityClass %>): Observable<EntityResponseType> {
    return this.create<%= entityClass %>GQL
        .mutate({<%= entityInstance %>} as Create<%= entityClass %>Vars)
        .pipe(map(result => this.graphQLUtils.toHttpResponse(result)));
  }

  delete(_id: string): Observable<HttpResponse<{}>> {
    const id = this.getId(_id);
    return this.delete<%= entityClass %>GQL.mutate({id}).pipe(map(result => this.graphQLUtils.toHttpResponse(result)));
  }

  find(_id: string): Observable<EntityResponseType> {
    const id = this.getId(_id);
    return this.get<%= entityClass %>GQL.fetch({ id }).pipe(map(result => this.graphQLUtils.toHttpResponse(result)));
  }

  partialUpdate(<%= entityInstance %>: I<%= entityClass %>): Observable<EntityResponseType> {
    return of(new HttpResponse());
  }

  update(<%= entityInstance %>: I<%= entityClass %>): Observable<EntityResponseType> {
    return this.update<%= entityClass %>GQL
        .mutate({<%= entityInstance %> } as Update<%= entityClass %>Vars)
        .pipe(map(result => this.graphQLUtils.toHttpResponse(result)));
  }

  private getId(id: string): <%= pkType %> {
    <%_ if(pkType === 'number') { _%>
    return parseInt(id, 10);
    <%_ } else { _%>
    return id;
    <% } _%>
  }
}
