<%_
const ENTITY_CLASS_UPPERCASE = entityClass.toUpperCase();
%>
import { client } from 'app/config/apollo-client';
import { Create<%= entityClass %>Document, Delete<%= entityClass %>Document, Get<%= entityClass %>Document, Get<%= entityClass %>sDocument, Update<%= entityClass %>Document } from 'app/entities/<%= entityFolderName %>/<%= entityFileName %>.gql';
import { I<%= entityClass %> } from 'app/shared/model/<%= entityFileName %>.model';
import { ICrudDeleteAction, ICrudPutAction } from 'react-jhipster';
import { ACTION_TYPES } from './<%= entityFileName %>.reducer';

export const getEntities = (page?, size?, sort?, bypassCache?) => {
  const payload = client.query({ query: Get<%= entityClass %>sDocument, variables: { page, size, sort }, fetchPolicy: bypassCache ? 'no-cache' : 'cache-first' })
    .then(res => ({ data: res.data.result.edges.map(e => e.node), headers: {} }));
  return {
    type: ACTION_TYPES.FETCH_<%= ENTITY_CLASS_UPPERCASE %>_LIST,
    payload
  }
}

export const getEntity = id => {
  const payload = client.query({ query: Get<%= entityClass %>Document, variables: { id } })
    .then(res => ({data: res.data.result}));
  return {
    type: ACTION_TYPES.FETCH_<%= ENTITY_CLASS_UPPERCASE %>,
    payload
  }
}

export const createEntity: ICrudPutAction<I<%= entityClass %>> = <%= entityInstance %> => async dispatch => {
  const payload = client.mutate({ mutation: Create<%= entityClass %>Document, variables: { <%= entityInstance %> }});
  const result = await dispatch({
    type: ACTION_TYPES.CREATE_<%= ENTITY_CLASS_UPPERCASE %>,
    payload
  });
  dispatch(getEntities());
  return result;
}

export const updateEntity: ICrudPutAction<I<%= entityClass %>> = <%= entityInstance %> => async dispatch => {
  const payload = client.mutate({ mutation: Update<%= entityClass %>Document, variables: { <%= entityInstance %> }});
  const result = await dispatch({
    type: ACTION_TYPES.UPDATE_<%= ENTITY_CLASS_UPPERCASE %>,
    payload
  });
  dispatch(getEntities());
  return result;
}

export const deleteEntity: ICrudDeleteAction<I<%= entityClass %>> = login => async dispatch => {
  const payload = client.mutate({ mutation: Delete<%= entityClass %>Document, variables: { login }});
  const result = await dispatch({
    type: ACTION_TYPES.DELETE_<%= ENTITY_CLASS_UPPERCASE %>,
    payload
  });
  dispatch(getEntities());
  return result;
}

export const reset = () => ({
  type: ACTION_TYPES.RESET,
});
