<%_
const pkType = getPkType(databaseType) === 'Long' ? 'number' : 'boolean';
const usedClasses = [Â `Create${entityClass}Impl`, `Update${entityClass}Impl`, ...relationships.map(r => Base`${r.otherEntityNameCapitalized}`)];
_%>
<%_ if (clientFramework === 'angularX') {  %>
import { Injectable } from '@angular/core';
import * as Apollo from 'apollo-angular';
<%_ } %>
<%_ if (clientFramework === 'react') {  %>
import * as Apollo from '@apollo/client';
<%_ } %>
import { ArgsType, Field, ObjectType, buildQuery, buildMutation } from 'graphql-typeop';
import { Create<%= entityClass %>ArgsImpl, Mutation, MutationCreate<%= entityClass %>Args, MutationUpdate<%= entityClass %>Args, Paginated<%= entityClass %>, <%= entityClass %>, <%= entityClass %>Edge, Query, QueryGet<%= entityClass %>Args, Update<%= entityClass %>ArgsImpl } from 'src/main/webapp/graphql';
<%_ for (const r of relationships) { _%>
import { Base<%= r.otherEntityNameCapitalized %> } from '../<%= r.otherEntity.entityFolderName %>/<%= r.otherEntity.entityFileName %>.gql' %>
<%_ } _%>

@ObjectType()
class Base<%= entityClass %> implements Partial<<%= entityClass %>> {
<%_ for (const field of fields) { _%>
  <%= field.fieldName%>!: <%= field.tsType %>
<%_ } _%>
}

@ObjectType()
class Detail<%= entityClass %> extends Base<%= entityClass %> implements Partial<<%= entityClass %>> {
<%_ for (const relationship of relationships) { _%>
  <%= relationship.relationshipName %>!: Base<%= relationship.otherEntityNameCapitalized %>
<%_ } _%>
}

@ArgsType()
class Get<%= entityClass %>Vars implements QueryGet<%= entityClass %>Args {
  id!: <%= pkType %>;
}

@ObjectType()
class Get<%= entityClass %>Query {
  @Field<Query, Get<%= entityClass %>Vars>({aliasFor: 'get<%= entityClass %>'})
  result!: Detail<%= entityClass %>;
}

@ArgsType()
class Get<%= entityClass %>sVars {
}

@ObjectType()
class <%= entityClass %>EdgeResult implements Partial<<%= entityClass %>Edge> {
  node!: Detail<%= entityClass %>;
}

@ObjectType()
class Get<%= entityClass %>sResult implements Partial<Paginated<%= entityClass %>> {
  edges!: <%= entityClass %>EdgeResult[];
  totalCount?: number;
}

@ObjectType()
class Get<%= entityClass %>sQuery {
  @Field<Query, Get<%= entityClass %>sVars>({aliasFor: 'get<%= entityClass %>s'})
  result!: Get<%= entityClass %>sResult;
}

@ArgsType()
class Create<%= entityClass %>Vars implements MutationCreate<%= entityClass %>Args {
  <%= entityInstance %>!: Create<%= entityClass %>ArgsImpl;
}

@ObjectType()
class Create<%= entityClass %>Mutation {
  @Field<Mutation, Create<%= entityClass %>Vars>({aliasFor: 'create<%= entityClass %>'})
  result!: Detail<%= entityClass %>;
}

@ArgsType()
class Update<%= entityClass %>Vars implements MutationUpdate<%= entityClass %>Args {
  <%= entityInstance %>!: Update<%= entityClass %>ArgsImpl;
}

@ObjectType()
class Update<%= entityClass %>Mutation {
  @Field<Mutation, Update<%= entityClass %>Vars>({aliasFor: 'update<%= entityClass %>'})
  result!: Detail<%= entityClass %>;
}

@ObjectType()
class Delete<%= entityClass %>Mutation {
  @Field<Mutation, Get<%= entityClass %>Vars>({aliasFor: 'delete<%= entityClass %>'})
  result!: number;
}

const usedClasses = [ Create<%= entityClass %>ArgsImpl, Update<%= entityClass %>ArgsImpl, <%= relatedEntityClasses.join(', ')%> ];

export const Get<%= entityClass %>Document = buildQuery(Get<%= entityClass %>Query, Get<%= entityClass %>Vars);
export const Get<%= entityClass %>sDocument = buildQuery(Get<%= entityClass %>sQuery, Get<%= entityClass %>sQuery);
export const Create<%= entityClass %>Document = buildMutation(Create<%= entityClass %>Mutation, Create<%= entityClass %>Vars)
export const Update<%= entityClass %>Document = buildMutation(Update<%= entityClass %>Mutation, Update<%= entityClass %>Vars)
export const Delete<%= entityClass %>Document = buildMutation(Delete<%= entityClass %>Mutation, Get<%= entityClass %>Vars)

<%_ if (clientFramework === 'angularX') {  %>
@Injectable({ providedIn: 'root'})
export class Get<%= entityClass %>GQL extends Apollo.Query<Get<%= entityClass %>Query, Get<%= entityClass %>Vars> {
  document = Get<%= entityClass %>Document;

  constructor(apollo: Apollo.Apollo) {
    super(apollo)
  }
}

@Injectable({ providedIn: 'root'})
export class Get<%= entityClass %>sGQL extends Apollo.Query<Get<%= entityClass %>sQuery, Get<%= entityClass %>sVars> {
  document = Get<%= entityClass %>sDocument;

  constructor(apollo: Apollo.Apollo) {
    super(apollo);
  }
}

@Injectable({ providedIn: 'root'})
export class Create<%= entityClass %>GQL extends Apollo.Mutation<Create<%= entityClass %>Mutation, Create<%= entityClass %>Vars> {
  document = Create<%= entityClass %>Document;

  constructor(apollo: Apollo.Apollo) {
    super(apollo);
  }
}

@Injectable({ providedIn: 'root'})
export class Update<%= entityClass %>GQL extends Apollo.Mutation<Update<%= entityClass %>Mutation, Update<%= entityClass %>Vars> {
  document = Update<%= entityClass %>Document;

  constructor(apollo: Apollo.Apollo) {
    super(apollo);
  }
}

@Injectable({ providedIn: 'root'})
export class Delete<%= entityClass %>GQL extends Apollo.Mutation<Delete<%= entityClass %>Mutation, Get<%= entityClass %>Vars> {
  document = Delete<%= entityClass %>Document;

  constructor(apollo: Apollo.Apollo) {
    super(apollo);
  }
}
<%_ } %>

<%_ if (clientFramework === 'react') {  %>
export function useGet<%= entityClass %>Query(options?: Apollo.QueryHookOptions<Get<%= entityClass %>Query, Get<%= entityClass %>Vars>) {
  return Apollo.useQuery<Get<%= entityClass %>Query, Get<%= entityClass %>Vars>(Get<%= entityClass %>Document, options);
}

export function useGet<%= entityClass %>sQuery(options?: Apollo.QueryHookOptions<Get<%= entityClass %>sQuery, Get<%= entityClass %>sVars>) {
  return Apollo.useQuery<Get<%= entityClass %>sQuery, Get<%= entityClass %>sVars>(Get<%= entityClass %>sDocument, options);
}

export function useCreate<%= entityClass %>Mutation(options?: Apollo.MutationHookOptions<Create<%= entityClass %>Mutation, Create<%= entityClass %>Vars>) {
  return Apollo.useMutation<Create<%= entityClass %>Mutation, Create<%= entityClass %>Vars>(Create<%= entityClass %>Document, options);
}

export function useUpdate<%= entityClass %>Mutation(options?: Apollo.MutationHookOptions<Update<%= entityClass %>Mutation, Update<%= entityClass %>Vars>) {
  return Apollo.useMutation<Update<%= entityClass %>Mutation, Update<%= entityClass %>Vars>(Update<%= entityClass %>Document, options);
}

export function useDelete<%= entityClass %>Mutation(options?: Apollo.MutationHookOptions<Delete<%= entityClass %>Mutation, Delete<%= entityClass %>Vars>) {
  return Apollo.useMutation<Delete<%= entityClass %>Mutation, Delete<%= entityClass %>Vars>(Delete<%= entityClass %>Document, options);
}
<%_ } %>
