/* eslint-disable max-classes-per-file */
/* eslint-disable id-blacklist */
import { Paginated } from './paginated.object-type';
import { <%= entityClass %>DTO } from '../dto/<%= entityFileName %>.dto';
import { Field, ObjectType, PartialType } from '@nestjs/graphql';
<%_ for (const r of relationships) { _%>
import { <%= r.otherEntity.entityClass %>DTO } from '../dto/<%= r.otherEntity.entityFileName %>.dto' %>
import { <%= r.otherEntity.entityClass %> } from './<%= r.otherEntity.entityFileName %>.object-type' %>
<%_ } _%>

@ObjectType()
export class Partial<%= entityClass %> extends PartialType(<%= entityClass %>DTO) {}

@ObjectType()
export class <%= entityClass %> extends Partial<%= entityClass %> {
<%_ for (const r of relationships) { _%>
  <%_ if (r.collection) { _%>
    @Field(() => [<%= r.otherEntity.entityClass %>], { nullable: true })
    <%= r.relationshipName %>?: <%= r.otherEntity.entityClass %>DTO[];
  <%_ } else { _%>
    @Field(() => <%= r.otherEntity.entityClass %>,  { nullable: true })
    <%= r.relationshipName %>?: <%= r.otherEntity.entityClass %>DTO;
  <%_ } _%>
<%_ } _%>
<%_ for (const field of gqlFields) { %>
    @Field(() => <%= field.target.type %>, { nullable: <%= !field.required %> })
    <%= field.name%>?: <%= field.target.type.toLowerCase() %>;
<%_ }%>
}

@ObjectType()
export class Paginated<%= entityClass %> extends Paginated(<%= entityClass %>) {}
