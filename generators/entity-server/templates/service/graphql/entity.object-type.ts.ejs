/* eslint-disable max-classes-per-file */
import { Paginated } from './paginated.object-type';
import { <%= entityClass %>DTO } from '../dto/<%= entityFileName %>.dto';
import { Field, ObjectType, PartialType } from '@nestjs/graphql';
<%_ for (const r of relationships) { _%>
import { <%= r.otherEntity.entityClass %>DTO } from '../dto/<%= r.otherEntity.entityFileName %>.dto' %>
import { <%= r.otherEntity.entityClass %> } from './<%= r.otherEntity.entityFileName %>.object-type' %>
<%_ } _%>

@ObjectType()
export class Partial<%= entityClass %> extends PartialType(<%= entityClass %>DTO) {}

@ObjectType()
export class <%= entityClass %> extends Partial<%= entityClass %> {
<%_ for (const r of relationships) { _%>
  <%_ if (r.ownerSide) { _%>
    @Field(() => <%= r.otherEntity.entityClass %>)
    <%= r.relationshipName %>?: <%= r.otherEntity.entityClass %>DTO;
  <%_ } else { _%>
    @Field(() => [<%= r.otherEntity.entityClass %>])
    <%= r.relationshipName %>?: <%= r.otherEntity.entityClass %>DTO[];
  <%_ } _%>
<%_ } _%>
}

@ObjectType()
export class Paginated<%= entityClass %> extends Paginated(<%= entityClass %>) {}
